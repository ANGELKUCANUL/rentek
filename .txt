**
 * @swagger
 * /providers/{provider_id}/machinery:
 *   post:
 *     tags:
 *       - Provider
 *     summary: Un proveedor agrega nuevas maquinarias
 *     parameters:
 *       - in: path
 *         name: provider_id
 *         required: true
 *         schema:
 *           type: string
 *           format: uuid
 *         description: ID del proveedor que agrega la maquinaria
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               name:
 *                 type: string
 *                 example: "Excavadora CAT 320"
 *               brand:
 *                 type: string
 *                 example: "Caterpillar"
 *               location:
 *                 type: string
 *                 example: "Ciudad de México"
 *               description:
 *                 type: string
 *                 example: "Excavadora de alto rendimiento con capacidad de 20 toneladas."
 *               rental_price:
 *                 type: number
 *                 example: 1500
 *               image_code:
 *                 type: string
 *                 example: "excavadora_cat_320"
 *               state:
 *                 type: boolean
 *                 example: true
 *     responses:
 *       201:
 *         description: Máquina creada exitosamente
 *       400:
 *         description: Datos inválidos o proveedor no encontrado
 *       500:
 *         description: Error al crear la máquina
 */
router.post('/:provider_id/machinery', async (req, res) => {
    try {
      const { provider_id } = req.params;
      const { name, brand, location, description, rental_price, image_code, state } = req.body;
  
      // Verificar si el proveedor existe
      const providerExists = await Provider.findByPk(provider_id);
      if (!providerExists) {
        return res.status(400).json({ error: `Proveedor con ID ${provider_id} no existe` });
      }
  
      // Crear la nueva maquinaria
      const newMachinery = await Machinery.create({
        name, brand, location, description, rental_price, image_code, state, provider_id
      });
  
      res.status(201).json(newMachinery);
    } catch (error) {
      res.status(500).json({ error: 'Error al crear la máquina', details: error.message });
    }
  });
  











  /**
 * @swagger
 * /machinery/{id}:
 *   get:
 *     tags:
 *       - Machinery
 *     summary: Obtener maquinaria por ID
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: string
 *           format: uuid
 *         description: ID de la maquinaria
 *     responses:
 *       200:
 *         description: Maquinaria encontrada
 *       400:
 *         description: ID de maquinaria inválido
 *       404:
 *         description: Maquinaria no encontrada
 *       500:
 *         description: Error al obtener maquinaria
 */
router.get('/:id', async (req, res) => {
  try {
    const { id } = req.params;

    // Validamos si el ID es válido (uuid)
    if (!id) {
      return res.status(400).json({ error: 'Debe proporcionar un ID válido de maquinaria' });
    }

    // Buscamos la maquinaria por ID
    const machinery = await Machinery.findByPk(id);

    // Si no se encuentra la maquinaria, devolvemos un 404
    if (!machinery) {
      return res.status(404).json({ error: 'Maquinaria no encontrada' });
    }

    // Respondemos con los datos de la maquinaria encontrada
    res.status(200).json(machinery);
  } catch (error) {
    res.status(500).json({ error: 'Error al obtener maquinaria', details: error.message });
  }
});
